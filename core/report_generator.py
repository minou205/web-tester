# core/report_generator.py
# Build TXT + JSON reports with summary, element lists and execution results.

import os
import json
import datetime
from core.utils import get_logger, ensure_dir

log = get_logger()

def build_reports(report_data, output_dir="outputs"):
    ts = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    rep_dir = os.path.join(output_dir, "reports")
    ensure_dir(rep_dir)
    txt_path = os.path.join(rep_dir, f"report_{ts}.txt")
    json_path = os.path.join(rep_dir, f"report_{ts}.json")
    try:
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write("="*60 + "\n")
            f.write("AI WEB TESTER - SCAN REPORT\n")
            f.write("="*60 + "\n\n")
            f.write(f"Target URL: {report_data.get('target_url', report_data.get('url'))}\n")
            f.write(f"Timestamp : {ts}\n")
            f.write(f"Pages scanned: {len(report_data.get('pages', []))}\n")
            f.write(f"Interactive elements: {report_data.get('fields_found', report_data.get('counts',{}).get('found',0))}\n\n")
            f.write("=== Pages & Elements ===\n")
            for p in report_data.get("pages", []):
                f.write(f"\nPage: {p.get('url')}\n")
                for i, el in enumerate(p.get("fields", []), 1):
                    f.write(f"  [{i}] tag={el.get('tag')} name={el.get('name')} id={el.get('id')}\n")
                    if el.get("selector"):
                        f.write(f"      selector: {el.get('selector')}\n")
                    if el.get("text"):
                        f.write(f"      text: {el.get('text')[:150].replace('\\n',' ')}\n")
                if p.get("canvas_texts"):
                    f.write("  Canvas captures:\n")
                    for c in p.get("canvas_texts", []):
                        f.write(f"    - {str(c)[:200]}\n")
            f.write("\n=== Execution Summary ===\n")
            for execn in report_data.get("execution", report_data.get("execution_results", [])):
                f.write(f"\nPage: {execn.get('page')}\n")
                for r in execn.get("results", []):
                    f.write(f"  {r.get('selector','N/A')} => {r.get('status')} ({r.get('desc')})\n")
            f.write("\nReport generated by AI Web Tester\n")
    except Exception as e:
        log.warning(f"Failed to write TXT report: {e}")
    try:
        with open(json_path, "w", encoding="utf-8") as jf:
            json.dump(report_data, jf, indent=2, ensure_ascii=False)
    except Exception as e:
        log.warning(f"Failed to save JSON report: {e}")
    log.info(f"Reports created: {txt_path}, {json_path}")
    return {"txt": txt_path, "json": json_path}
